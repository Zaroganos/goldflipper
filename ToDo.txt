This is a list of things to do for the goldflipper project.

- [x] Add limit orders at the 'last' price to the execution flow and play creation:
      1. ✓ Add price reference choice (bid/last) to play creation tool
      2. ✓ Update play data structure to store price reference
      3. ✓ Modify order execution logic to use selected price
      4. ✓ Add price reference validation in core functions
      5. ✓ Update logging to show price reference used
      6. ✓ Maintain backward compatibility for existing plays

      
- [?] Fix the problem with plays whose limit order is not filled and expires at the end of the day:
      1. ~~Implement atomic file operations for all play file writes~~ (Implemented in handle_end_of_day_pending_plays)
      2. ~~Add file backups before critical operations~~ (Implemented via save_play validation)
      3. ~~Add validation checks before saving play data~~ (Added load_play validation)
      4. ~~Add integrity verification for play files~~ (Added in handle_end_of_day_pending_plays)
      5. ~~Implement proper error handling and recovery for corrupted files~~ (Added comprehensive error handling)
      - Additional improvements:
        - Updated directory paths
        - Removed unnecessary order cancellation for GTD orders
        - Enhanced logging and error reporting


- [ ] Implement a packaging and installation system for the program:
      1. Create spec file for PyInstaller with all dependencies
      2. Add data files to spec (config files, templates, etc.)
      3. Set up proper file paths for packaged version
      4. Create separate builds for Windows and Linux
      5. Add version checking and auto-update capability
      6. Create installation scripts for each platform
      7. Set up proper logging paths for installed version


- [ ] Implement service functionality and resilience features:
      1. Set up Windows Service / Linux Systemd service:
         - Create service configuration files
         - Implement proper service lifecycle hooks (start, stop, pause, resume)
         - Configure service dependencies (network, filesystem)
         - Set up appropriate user permissions and security context
      
      2. Add automatic restart capabilities:
         - Implement watchdog functionality to monitor program health
         - Set up crash detection and reporting
         - Configure automatic restart on failure
         - Add exponential backoff for restart attempts
      
      3. Implement state recovery mechanisms:
         - Add periodic state snapshots
         - Implement transaction logging
         - Create state recovery procedures
         - Add consistency checks for recovered state
      
      4. Add system integration features:
         - Configure startup with operating system
         - Set up proper logging to system log (Windows Event Log / syslog)
         - Implement health monitoring endpoints
         - Add administrative control interface
      
      5. Implement graceful shutdown handling:
         - Add proper cleanup procedures
         - Implement state preservation
         - Handle in-progress operations
         - Add shutdown notification system

      6. Create monitoring and alerting system:
         - Set up health metrics collection
         - Implement alert triggers for critical conditions
         - Add remote monitoring capability
         - Create status dashboard

