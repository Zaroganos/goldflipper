This is a list of things to do for the goldflipper project.

- [x] Add limit orders at the 'last' price to the execution flow and play creation:
      1. ✓ Add price reference choice (bid/last) to play creation tool
      2. ✓ Update play data structure to store price reference
      3. ✓ Modify order execution logic to use selected price
      4. ✓ Add price reference validation in core functions
      5. ✓ Update logging to show price reference used
      6. ✓ Maintain backward compatibility for existing plays

      
- [?] Fix the problem with plays whose limit order is not filled and expires at the end of the day:
      1. ~~Implement atomic file operations for all play file writes~~ (Implemented in handle_end_of_day_pending_plays)
      2. ~~Add file backups before critical operations~~ (Implemented via save_play validation)
      3. ~~Add validation checks before saving play data~~ (Added load_play validation)
      4. ~~Add integrity verification for play files~~ (Added in handle_end_of_day_pending_plays)
      5. ~~Implement proper error handling and recovery for corrupted files~~ (Added comprehensive error handling)
      - Additional improvements:
        - Updated directory paths
        - Removed unnecessary order cancellation for GTD orders
        - Enhanced logging and error reporting


- [ ] Implement a packaging and installation system for the program:
      1. Create spec file for PyInstaller with all dependencies
      2. Add data files to spec (config files, templates, etc.)
      3. Set up proper file paths for packaged version
      4. Create separate builds for Windows and Linux
      5. Add version checking and auto-update capability
      6. Create installation scripts for each platform
      7. Set up proper logging paths for installed version
      8. Integrate PyInstaller packaging to create standalone executables and test on target platforms


- [ ] Implement service functionality and resilience features:
      1. Set up Windows Service / Linux Systemd service:
         - Create service configuration files
         - Implement proper service lifecycle hooks (start, stop, pause, resume)
         - Configure service dependencies (network, filesystem)
         - Set up appropriate user permissions and security context
      
      2. Add automatic restart capabilities:
         - Implement watchdog functionality to monitor program health
         - Set up crash detection and reporting
         - Configure automatic restart on failure
         - Add exponential backoff for restart attempts
      
      3. Implement state recovery mechanisms:
         - Add periodic state snapshots
         - Implement transaction logging
         - Create state recovery procedures
         - Add consistency checks for recovered state
      
      4. Add system integration features:
         - Configure startup with operating system
         - Set up proper logging to system log (Windows Event Log / syslog)
         - Implement health monitoring endpoints
         - Add administrative control interface
      
      5. Implement graceful shutdown handling:
         - Add proper cleanup procedures
         - Implement state preservation
         - Handle in-progress operations
         - Add shutdown notification system

      6. Create monitoring and alerting system:
         - Set up health metrics collection
         - Implement alert triggers for critical conditions
         - Add remote monitoring capability
         - Create status dashboard

-- Service Management Enhancements --

- Added a "Manage Service" button to the GoldFlipper TUI (goldflipper_tui.py).
  - This button now presents a confirmation dialog with centered text.
  - The dialog clearly warns that administrative privileges are required and that changes (install/uninstall) will not take effect until a system reboot.

- For service installation:
  - The elevated process installs the service and automatically starts it (via a PowerShell command that executes "python -m goldflipper.run --mode install" followed by "net start GoldFlipperService").

- For service uninstallation:
  - The elevated process stops the running service before uninstalling it (via a PowerShell command that executes "net stop GoldFlipperService" followed by "python -m goldflipper.run --mode remove").

- These changes improve user clarity and ensure that service state actions are performed safely and with the proper permissions.

- [ ] Refactor package imports for proper PyInstaller packaging:
    1. In all modules inside the 'goldflipper' package (starting with goldflipper_tui.py), change absolute imports to relative imports. For example, change:
         from goldflipper.config.config import config
       to:
         from .config.config import config
    2. Review the sys.path modifications in entry scripts (e.g., at the top of goldflipper_tui.py). Ensure that:
         - The parent directory is inserted into sys.path only if needed.
         - __package__ is set appropriately (e.g., __package__ = "goldflipper") when running as __main__.
    3. Update any other modules that use absolute imports from the package (such as in tools, run.py, or other submodules) to use relative imports consistently.
    4. Test the application in development (using "python -m goldflipper.goldflipper_tui") and verify that the frozen executable (built by PyInstaller) works with the refactored imports.

- [ ] Resolve circular import issues in the goldflipper package:
    1. Review goldflipper/__init__.py and remove or refactor any top-level imports (e.g., remove "from goldflipper.config.config import config").
    2. If needed, perform lazy (local) imports within functions to avoid circular references.
    3. Check that no modules within the package import each other in a circular manner.
    4. Rebuild and test the PyInstaller executable to confirm that the issue is resolved.
- Then, in other parts of your code that need config, instead of:
  from goldflipper.config.config import config
  to:
  from goldflipper import get_config
  config = get_config()

- [ ] Ensure all non-code data files are bundled with the PyInstaller executable:
    1. Update the spec file to include YAML configuration files (e.g., modify includes to ['config/*.py', 'config/*.yaml', 'plays/*.json', 'tools/PlayTemplate/*']).
    2. Consider using a resource path helper function in configuration modules to reliably locate bundled data files.
    3. Clean, rebuild, and test the frozen executable to verify that all data files are accessible.



