This is a list of tasks to do and features to implement for the goldflipper project.
Place new tasks on top.

- [✓] Fix WEM Streamlit module:
      1. ✓ Fix WEM calculation and display in both vertical and horizontal layouts
      2. ✓ Implement proper database integration with computed WEM values
      3. ✓ Improve UI with better filtering and metric selection
      4. ✓ Add data export functionality for CSV and Excel formats
      5. ✓ Enhance error handling and logging throughout

- [x] Implement settings management in Streamlit UI:
      1. ✓ Create Settings page in Streamlit UI
      2. ✓ Add YAML file loading and parsing
      3. ✓ Implement settings display and editing interface
      4. ✓ Add save functionality for settings changes
      5. [ ] Complete database integration for settings storage
      6. [ ] Implement settings schema validation

- [~] Implement DuckDB integration for settings:
      1. ✓ Create database migration for settings schema
      2. ✓ Add settings_schema and user_settings tables
      3. ✓ Implement SettingsManager class for DB interaction
      4. ✓ Add YAML import/export functionality
      5. [ ] Fix remaining DuckDB compatibility issues
      6. [ ] Complete transaction handling and error recovery

- [ ] Implement Poetry + PyInstaller packaging workflow:
      1. ✓ Set up Poetry environment and configuration
      2. ✓ Create pyproject.toml with all dependencies
      3. ✓ Configure VS Code for Poetry environment
      4. ✓ Update installation scripts for Poetry
      5. ✓ Add Poetry-specific files to .gitignore
      6. [ ] Update PyInstaller spec for Poetry environment
      7. [ ] Test packaging with Poetry dependencies
      8. [ ] Create Poetry-based deployment scripts

- [ ] Clean up old dependency management:
      1. [ ] Remove requirements.txt (replaced by Poetry)
      2. [ ] Archive setup.py as backup
      3. [ ] Update documentation for Poetry usage
      4. [ ] Test all scripts with Poetry environment

- [ ] Fix IDE import resolution:
      1. [ ] Update remaining import paths
      2. [ ] Fix circular dependencies
      3. [ ] Add type hints to improve IDE support
      4. [ ] Update package structure if needed

- [ ] Implement threading
- [ ] Implement locking

- [ ] Migrate UI to Streamlit for better performance and maintainability:
      1. ✓ Set up Streamlit project structure:
         - ✓ Create web/ directory with app.py and pages/
         - ✓ Set up components/ directory for reusable UI elements
         - ✓ Configure proper imports and dependencies
         - ✓ Add requirements.txt for Streamlit and dependencies
      
      2. [ ] Implement core dashboard:
         - [ ] Create main dashboard layout
         - [ ] Add account selection and status indicators
         - [ ] Implement quick action buttons
         - [ ] Add real-time status updates
         - [ ] Integrate with existing core functionality
      
      3. [ ] Migrate individual features:
         - [ ] Play creation and management
         - [ ] Trade logging and analysis
         - [ ] Market data visualization
         - ✓ Configuration management
         - ✓ Weekly Expected Moves (WEM) analysis
         - [ ] Chart viewing
      
      4. [ ] Testing and validation:
         - [ ] Add unit tests for new components
         - [ ] Implement integration tests
         - [ ] Perform performance testing
         - [ ] Conduct user acceptance testing
      
      5. [ ] Deployment and transition:
         - [ ] Create deployment scripts
         - [ ] Add documentation for new UI
         - [ ] Plan user transition strategy
         - [ ] Keep old UI as fallback during transition

- [?] Fix the problem with plays whose limit order is not filled and expires at the end of the day:
      1. ✓ Implement atomic file operations for all play file writes
      2. ✓ Add file backups before critical operations
      3. ✓ Add validation checks before saving play data
      4. ✓ Add integrity verification for play files
      5. ✓ Implement proper error handling and recovery for corrupted files
      - Additional improvements:
        - Updated directory paths
        - Removed unnecessary order cancellation for GTD orders
        - Enhanced logging and error reporting

- [ ] Implement a packaging and installation system for the program:
      1. Create spec file for PyInstaller with all dependencies
      2. Add data files to spec (config files, templates, etc.)
      3. Set up proper file paths for packaged version
      4. Create separate builds for Windows and Linux
      5. Add version checking and auto-update capability
      6. Create installation scripts for each platform
      7. Set up proper logging paths for installed version
      8. Integrate PyInstaller packaging to create standalone executables and test on target platforms

- [ ] Implement service functionality and resilience features:
      1. Set up Windows Service / Linux Systemd service:
         - Create service configuration files
         - Implement proper service lifecycle hooks (start, stop, pause, resume)
         - Configure service dependencies (network, filesystem)
         - Set up appropriate user permissions and security context
      
      2. Add automatic restart capabilities:
         - Implement watchdog functionality to monitor program health
         - Set up crash detection and reporting
         - Configure automatic restart on failure
         - Add exponential backoff for restart attempts
      
      3. Implement state recovery mechanisms:
         - Add periodic state snapshots
         - Implement transaction logging
         - Create state recovery procedures
         - Add consistency checks for recovered state
      
      4. Add system integration features:
         - Configure startup with operating system
         - Set up proper logging to system log (Windows Event Log / syslog)
         - Implement health monitoring endpoints
         - Add administrative control interface
      
      5. Implement graceful shutdown handling:
         - Add proper cleanup procedures
         - Implement state preservation
         - Handle in-progress operations
         - Add shutdown notification system

      6. Create monitoring and alerting system:
         - Set up health metrics collection
         - Implement alert triggers for critical conditions
         - Add remote monitoring capability
         - Create status dashboard

-- Service Management Enhancements --

- Added a "Manage Service" button to the GoldFlipper TUI (goldflipper_tui.py).
  - This button now presents a confirmation dialog with centered text.
  - The dialog clearly warns that administrative privileges are required and that changes (install/uninstall) will not take effect until a system reboot.

- For service installation:
  - The elevated process installs the service and automatically starts it (via a PowerShell command that executes "python -m goldflipper.run --mode install" followed by "net start GoldFlipperService").

- For service uninstallation:
  - The elevated process stops the running service before uninstalling it (via a PowerShell command that executes "net stop GoldFlipperService" followed by "python -m goldflipper.run --mode remove").

- These changes improve user clarity and ensure that service state actions are performed safely and with the proper permissions.

- [x] Add limit orders at the 'last' price to the execution flow and play creation:
      1. ✓ Add price reference choice (bid/last) to play creation tool
      2. ✓ Update play data structure to store price reference
      3. ✓ Modify order execution logic to use selected price
      4. ✓ Add price reference validation in core functions
      5. ✓ Update logging to show price reference used
      6. ✓ Maintain backward compatibility for existing plays


- [~] Implementation of DuckDB database and migration to usage from current workflow      
-- Core Tables (Initial Implementation)
1. [ ] Plays table
2. [ ] Play Status History table
3. [ ] Trade Logs table

-- Extended Database Implementation
1. [ ] Trading Strategy Management:
   - Create trading_strategies table
   - Implement strategy versioning
   - Add strategy validation
   - Migrate existing strategy files

2. [ ] Service State Management:
   - Create service_backups table
   - Implement backup rotation
   - Add state validation
   - Migrate existing state files

3. [ ] Enhanced Logging System:
   - Create log_entries table
   - Implement structured logging
   - Add trace ID system
   - Migrate existing logs

4. [~] Configuration Management:
   - ✓ Create settings_schema table
   - ✓ Create user_settings table
   - ✓ Implement YAML-to-DB migration
   - [ ] Add schema validation
   - [ ] Implement complete DB-to-YAML sync
   - [ ] Fix DuckDB compatibility issues

5. [ ] System Monitoring:
   - Create watchdog_events table
   - Implement event tracking
   - Add resolution system
   - Set up monitoring dashboards

6. [ ] Chart Management:
   - Create chart_configurations table
   - Implement user preferences
   - Add indicator management
   - Migrate existing chart settings

7. [ ] Tool State Management:
   - Create tool_states table
   - Implement state persistence
   - Add configuration management
   - Migrate existing tool states

-- Database UI Implementation (Streamlit)
1. [ ] Create Database Overview Page:
   - Add table structure visualization
   - Implement data browsers
   - Add query interface
   - Create monitoring dashboard

2. [ ] Add Data Management Features:
   - Implement backup interface
   - Add data export tools
   - Create migration utilities
   - Add validation tools

3. [ ] Create Monitoring Interface:
   - Add performance metrics
   - Implement query analysis
   - Create health dashboard
   - Add alert configuration

4. [~] Implement Administration Tools:
   - [ ] Add user management
   - [ ] Create backup interface 
   - [ ] Implement maintenance tools
   - ✓ Add settings configuration editor